# Introducing App::Poly

A while back, I started a project that I ended up eventually calling [App::StatusSkein][statusskein]. The idea was to provide access to a variety of social networks from a single unifed location. As these things will, it grew to the point where it was tolerable for my primary use for it, and my desire to develop it further slackened. I had placed some (in retrospect) odd design constraints on it -- I was trying to not have a database at all, to only run locally, and to only keep a certain minimal amount of state loaded at any given time. After the initial page load, all the interaction between the web browser and the server was AJAX-based, and reloading the page would reset the state to the initial default. Parts of this worked well; parts of it... just worked, but all in all, it was successful at scratching the itch I had at the time.

Now, I've got a different itch -- same general area, but different design constraints. Now that I've got an iPad, it would be nice to have something similar to StatusSkein, but server-based, able to keep track of where in the timeline I'd last left off reading, and resume there again when accessed from a different location. I'd also like a chance to play around with [KiokuDB][kioku], and have an excuse to get my Vim config really tuned up, and get a [Dist::Zilla][dzil] setup that I like, and ... and so forth and so on. It would also be nice if I had a better way of maintaining my interest in the development of this app beyond the initial "hey, this itches!" stage. The ideal way to do that is to get users. Failing that, perhaps _readers_ will provide some motivation...

So, welcome to App::Poly development -- hopefully the first in a series of posts outlining bite-sized bits of coding and other noddling around as I work on developing this new trans-social network app...


[statusskein]: http://github.com/genehack/app-status-skein
[kioku]: http://www.iinteractive.com/kiokudb/
[dzil]: http://dzil.org/
